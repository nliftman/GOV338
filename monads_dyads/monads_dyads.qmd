---
title: "Converting Monadic Data into Dyadic"
format: html
editor: visual
---

# Making Monadic Data into dyadic data

Often, we do not have our network data in the right form (adjacency matrix/edge list) and instead have monadic data. However, we can use that data to construct ties based on shared characteristics.

## Load packages

We will need the rio, igraph, and tidyverse package to be loaded.

```{r, warning=F, message=F}
library(rio)
library(statnet)
library(tidyverse)
```

### Load Data

```{r}
df <- import("confirmation_votes.xlsx")
```

## 2. Make a copy of your ID variable

In the sample dataset, the variable "senator" identifies the name of each senator in the data set, so we will need to make a copy of this variable before calculating all potential combinations of senators. We want to copy all the variables so that we can generate edge characteristics such as shared vote and shared political party.

```{r}
df <- df |>
  mutate(senator_j=senator)
df <- df |>
  mutate(blinken_j=blinken)
df <- df |>
  mutate(yellen_j=yellen)
df <- df |>
  mutate(buttigieg_j=buttigieg)
df <- df |>
  mutate(party_j=party)
```

## Creat all possible combinations of 100 senators

The code below takes our dataframe (100 senators), and identifies all potential combinations of senators. If we recall back to the density formulat, this means we take the total number of nodes (100, in this case) multiplied by the total minus 1 (99). This will create a dataframe with every combo of senators, which we then filter to eliminate loops (senators cannot share a tie with themselves) by only including cases where our senator variable is a different senator then the senator_j variable.

```{r}
### Why are we dropping when senator=senator_j
combos <- df |>
  expand(senator, senator_j) |>
  filter(senator != senator_j)
```

## We now have an empty edgelist- bring in other data

So far, we have just created an edgelist, but this includes all potential combinations (this is a dyadic dataset with an i node and a j node). We know that senators voted differently, so we need to merge in the vote data (or whatever data you are using) in order to drop potential ties that do not exist. So, we create two dataframes, one for the sender (i) and one for the receiver (j).

```{r}
 DF1 <- df |>
   select(senator, blinken, yellen, buttigieg, party)

 DF2 <- df |>
   select(senator_j, blinken_j, yellen_j, buttigieg_j, party_j)

 ### Merge data
 joined_data <- left_join(combos, DF1, by = "senator")
  joined_data <- left_join(joined_data, DF2, by = "senator_j")
```

## 5. Filter to only include edges you want

We now have a full dyadic dataset with the characteristics merged in, but we still need to filter out cases where senators vote differently. The code below only keeps cases where the two senators vote the same on all three nominees.

```{r}
edge_list <- joined_data |>
  filter(blinken_j==blinken & yellen_j==yellen & buttigieg_j==buttigieg) 
```

We have an edgelist, but the problem is that it doesn't include isolates. So, we first need to create an empty dataset of all 100 senators, then we can bring in our ties data.

```{r, message=F, warning=F}
library(network)
```

We need to tell R how many nodes to include

```{r}
## While we "think" we know there are 100 senators, it's pretty common to have 102-105 senators in a term due to resignations, etc. We can automate the size of the network by using the nrow command. 
# We now have an empty network
nv <- nrow(df)
net_senate <-network.initialize(nv)

plot(net_senate)
```

## Name vertices

```{r}
network.vertex.names(x=net_senate) <- df$senator
```

```{r}
senate_el <- edge_list |>
  select(senator, senator_j)
net_senate[as.matrix(senate_el)] <- 1
```

```{r}
plot(net_senate)

```

```{r}
  set.vertex.attribute(x=net_senate,attrname="Population",val=df$party) 


```

```{r}
plot(net_senate, label=network.vertex.names(net_senate))
```
